# -*- coding: utf-8 -*-
"""Final Jakarta

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dMBF7DjtbmYEO9haeOsKzd4gQ3HvnF2Y
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import datetime

list_of_files = ["drive/MyDrive/DSC2022/city=Jakarta/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                 "drive/MyDrive/DSC2022/city=Jakarta/part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                 "drive/MyDrive/DSC2022/city=Jakarta/part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",]

list_of_files2 = ["drive/MyDrive/DSC2022/city=Jakarta/part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                 "drive/MyDrive/DSC2022/city=Jakarta/part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                 "drive/MyDrive/DSC2022/city=Jakarta/part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",]


list_of_files3 = ["drive/MyDrive/DSC2022/city=Jakarta/part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                  "drive/MyDrive/DSC2022/city=Jakarta/part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                  "drive/MyDrive/DSC2022/city=Jakarta/part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",
                  "drive/MyDrive/DSC2022/city=Jakarta/part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet",]

def to_category(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("category")
    
def to_float32(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("float32")
        
def to_uint16(df, *args):
    for col_name in args:
        df[col_name] = df[col_name].astype("uint16")
  
def to_int32(df, *args):
    for col_name in args:
      df[col_name] = df[col_name].astype("int32")

def format_datetime(df, col_name):
    # get datetime obj for all timestamps
    dt = df[col_name].apply(datetime.datetime.fromtimestamp)
    
    df["time"] = dt.apply(lambda x: x.time())
    df["hours"] = dt.apply(lambda x: x.hour)

def combine_dfs(list_of_files):
    list_of_dfs = []
    for file in list_of_files:
      df = pd.read_parquet(file)
      df['trj_id'] = df['trj_id'].astype('category')
      df['driving_mode'] = df['driving_mode'].astype('category')
      df['osname'] = df['osname'].astype('category')
      df['pingtimestamp'] = pd.to_numeric(df['pingtimestamp'], downcast="unsigned")
      df['rawlat'] = df['rawlat'].astype('float32')
      df['rawlng'] = df['rawlng'].astype('float32')
      df['speed'] = df['speed'].astype('float32')
      df['bearing'] = pd.to_numeric(df['bearing'], downcast="unsigned")
      df['accuracy'] = df['accuracy'].astype('float32')
      list_of_dfs.append(df)
    result = pd.concat(list_of_dfs, ignore_index = True)
    return result

df = combine_dfs(list_of_files)
df = df[df['speed'] >= 0]  
df2 = combine_dfs(list_of_files2)
df2 = df2[df2['speed'] >= 0]
df3 = combine_dfs(list_of_files3)
df3 = df3[df3['speed'] >= 0]

df4 = pd.concat([df, df2, df3])

df4_car = df4[df4["driving_mode"] == "car"]

"""**Finding the mean speed of the cars in jakarta**"""

df4_car["speed"].mean()

"""**Filtering out cars that have speed that are below average to understand what attribute to the lower speed**"""

df4_carslow = df4_car[df4_car["speed"] <= 7.902756214141846]
df4_carslow["accuracy"].mean()

"""**Filtering out cars that have low speed and high inaccuracy to determine what factors affect it**"""

df4_carslowhr = df4_carslow[df4_carslow["accuracy"] >= 6.102318286895752]

format_datetime(df4_carslowhr, "pingtimestamp")

df4_carslowhr

"""**Determining the peak hour for cars**"""

df4_carslowhr.groupby('hours').count().max(level = 0)

df4_carslow10hr = df4_carslowhr[df4_carslowhr['hours'] == 10]
df4_carslow10hr

import folium
from folium import plugins
from branca.element import Figure

# latitude and longitude of Singapore
jk_lat =  -6.200000
jk_lng = 106.816666

fig = Figure(width = 550, height = 350)

# add map to figure
m = folium.Map(width = 550, height = 350,
               location = [jk_lat, jk_lng],
               zoom_start = 11, min_zoom = 11, max_zoom = 16)
fig.add_child(m)

pings = df4_carslow10hr[['rawlat', 'rawlng']].to_numpy()

"""**Plotting the heat map to determine which areas are concentrated with cars with high inaccuracy and slow speed during peak hour**"""

plugins.HeatMap(pings, radius = 4, blur = 6).add_to(m)
m

df4_mcar = df4[df4["driving_mode"] == "motorcycle"]

"""**Finding the mean speed of the motorcycle in jakarta**"""

df4_mcar["speed"].mean()

df4_mcarslow = df4_mcar[df4_mcar["speed"] <= 7.010922908782959]
df4_mcarslow["accuracy"].mean()

"""**Filtering out motorcycles that have speed that are below average to understand what attribute to the lower speed**"""

df4_mcarslow = df4_mcarslow[df4_mcarslow["accuracy"] >= 5.451535224914551]

"""**Filtering out motorcycles that have low speed and high inaccuracy to determine what factors affect it**"""

format_datetime(df4_mcarslow, "pingtimestamp")

df4_mcarslow

"""**Determining the peak hour for motorcycles**"""

df4_mcarslow.groupby('hours').count()

df4_mcarslow10hr = df4_mcarslow[df4_mcarslow['hours'] == 10]
df4_mcarslow10hr

fig = Figure(width = 550, height = 350)

# add map to figure
m2 = folium.Map(width = 550, height = 350,
               location = [jk_lat, jk_lng],
               zoom_start = 11, min_zoom = 11, max_zoom = 16)
fig.add_child(m2)

pings2 = df4_mcarslow10hr[['rawlat', 'rawlng']].to_numpy()

"""**Plotting the heat map to determine which areas are concentrated with motorcycles with high inaccuracy and slow speed during peak hour**"""

plugins.HeatMap(pings2, radius = 4, blur = 6).add_to(m2)
m2